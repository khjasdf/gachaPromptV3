✅ AI 모델 코드 생성용 프롬프트: "장치 등록 시스템"
당신은 TypeScript 기반 백엔드 시스템을 설계하고 개발하는 시니어 소프트웨어 엔지니어입니다. 아래 요구사항을 기반으로, SRP(단일 책임 원칙) 및 계층형 아키텍처를 철저히 준수하여 NestJS 또는 Express.js 기반 백엔드 코드를 작성해주세요.

📌 프로젝트 개요
전국 각지에 설치된 무인 가챠 자판기 장치들이 중앙 서버에 자동으로 등록될 수 있도록 하는 시스템을 구현합니다.
자판기는 부팅 시 네트워크에 연결되며, 장치 고유 정보와 함께 등록 요청을 자동 전송합니다. 관리자는 웹 대시보드를 통해 등록 요청을 승인 또는 거부할 수 있으며, 승인된 장치에만 큐 URL을 발급합니다.

이 시스템은 다음 요소들을 포함합니다:

보안 (인증)

유효성 검증

상태 관리

오류 처리

재시도 로직

추후 확장을 고려한 추상화 설계

🧱 시스템 기술 스택 및 아키텍처
장치 측 (클라이언트):

Node.js 기반 자판기 소프트웨어

장치 정보: hardwareId, tenantId, ipAddress, systemInfo

주기적 폴링 및 재시도 로직 포함

HTTPS + JSON API 사용

서버 측 (중앙 시스템):

NestJS (또는 Express.js + TypeScript)

계층 구조: Controller / Service / Domain / Interface

보안: JWT 인증, IP 제어 가능

DB: AWS DynamoDB

파티션 키: PK = TENANT#<tenantId>, SK = DEVICE#<hardwareId>

GSI: GSI1 = 등록 상태 인덱싱용 (status)

메시징: AWS SQS

승인된 장치에게 고유 sqsQueueUrl 발급

interface/messaging/ 모듈에서 메시징 추상화 처리

프론트엔드: React.js 기반 관리자 웹 대시보드

승인/거부 UI

장치 상태 리스트업

📋 구현 요구사항 (요청/응답 명세 포함)
✅ [FR-1] 장치 등록 요청
API: POST /api/devices/register

요청 본문:

json
복사
편집
{
  "hardwareId": "string",
  "tenantId": "string",
  "ipAddress": "string",
  "systemInfo": {
    "os": "linux",
    "arch": "arm64",
    "mac": "xx:xx:xx:xx:xx"
  }
}
동작:

중복된 hardwareId 등록 방지

유효성 검증 실패 시 400 반환

등록 요청은 pending 상태로 저장됨

등록 요청 성공 시 응답:

json
복사
편집
{
  "status": "success",
  "message": "등록 요청이 저장되었습니다",
  "data": { "status": "pending" }
}
예외:

중복 등록: 409

입력 누락: 400

내부 오류: 500

✅ [FR-2] 승인 상태 폴링
API: GET /api/devices/status/:hardwareId

장치는 5분 간격으로 상태를 확인

응답 형태 (승인됨):

json
복사
편집
{
  "status": "success",
  "message": "승인 완료",
  "data": {
    "deviceId": "generated-id",
    "sqsQueueUrl": "https://sqs.ap-northeast-2.amazonaws.com/..."
  }
}
응답 형태 (대기중):

json
복사
편집
{
  "status": "success",
  "message": "승인 대기 중",
  "data": { "status": "pending" }
}
승인 실패 상태는 명시하지 않음 (장치는 등록부터 다시 시작)

✅ [FR-3] 재시도 및 타임아웃
장치는 최초 등록 이후 5분 간격으로 상태 확인

승인까지 최대 대기 시간: 24시간

승인되지 않을 경우 등록 재시도

✅ [FR-4] 관리자 승인/거부
관리자 인증 필수 (JWT)

API (승인): PUT /api/devices/:deviceId/approve

응답:

json
복사
편집
{
  "status": "success",
  "message": "장치가 승인되었습니다",
  "data": {
    "sqsQueueUrl": "https://sqs.ap-northeast-2.amazonaws.com/..."
  }
}
API (거부): PUT /api/devices/:deviceId/reject

요청 본문:

json
복사
편집
{ "reason": "이미 등록된 장치입니다" }
승인된 장치는 DB에서 status = approved로 업데이트

📦 폴더 구조 및 모듈 분리
graphql
복사
편집
src/
├── controller/         # API 라우팅
├── service/            # 비즈니스 로직
├── domain/             # 모델, 상태, 검증
├── interface/
│   ├── db/             # DynamoDB 인터페이스
│   ├── messaging/      # SQS 전송
│   └── auth/           # JWT 인증 모듈
🔐 공통 규칙 및 보안
모든 관리자 API는 Authorization: Bearer <JWT> 필요

장치 등록 요청은 인증 불필요 (공개 엔드포인트)

입력값은 DTO 스키마 또는 Zod/Joi로 엄격하게 검증

예외 발생 시 명확한 메시지와 HTTP 코드 반환

📈 설계 고려사항
메시징 시스템(SQS)은 인터페이스 계층을 통해 추상화하여 추후 Kafka 전환이 가능해야 함

모든 계층은 테스트 가능하도록 SRP를 지켜야 하며, 의존성은 주입 방식으로 구성

승인된 장치만 이벤트 큐를 통해 추가 메시지를 받을 수 있도록 제어

필요시 다음 항목도 포함해서 코드를 작성해주세요:

Swagger 기반 API 문서 (@nestjs/swagger 또는 swagger-jsdoc)

장치별 등록 로그 테이블 설계

인증 실패/허용된 IP 외 접근에 대한 응답 처리